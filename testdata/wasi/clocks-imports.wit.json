{
  "worlds": [
    {
      "name": "imports",
      "imports": {
        "interface-0": {
          "interface": {
            "id": 0
          }
        },
        "interface-1": {
          "interface": {
            "id": 1
          }
        },
        "interface-2": {
          "interface": {
            "id": 2
          }
        }
      },
      "exports": {},
      "package": 2
    }
  ],
  "interfaces": [
    {
      "name": "poll",
      "types": {
        "pollable": 0
      },
      "functions": {
        "[method]pollable.block": {
          "name": "[method]pollable.block",
          "kind": {
            "method": 0
          },
          "params": [
            {
              "name": "self",
              "type": 1
            }
          ],
          "docs": {
            "contents": "`block` returns immediately if the pollable is ready, and otherwise\nblocks until ready.\n\nThis function is equivalent to calling `poll.poll` on a list\ncontaining only this pollable."
          }
        },
        "[method]pollable.ready": {
          "name": "[method]pollable.ready",
          "kind": {
            "method": 0
          },
          "params": [
            {
              "name": "self",
              "type": 1
            }
          ],
          "result": "bool",
          "docs": {
            "contents": "Return the readiness of a pollable. This function never blocks.\n\nReturns `true` when the pollable is ready, and `false` otherwise."
          }
        },
        "poll": {
          "name": "poll",
          "kind": "freestanding",
          "params": [
            {
              "name": "in",
              "type": 2
            }
          ],
          "result": 3,
          "docs": {
            "contents": "Poll for completion on a set of pollables.\n\nThis function takes a list of pollables, which identify I/O sources of\ninterest, and waits until one or more of the events is ready for I/O.\n\nThe result `list<u32>` contains one or more indices of handles in the\nargument list that is ready for I/O.\n\nIf the list contains more elements than can be indexed with a `u32`\nvalue, this function traps.\n\nA timeout can be implemented by adding a pollable from the\nwasi-clocks API to the list.\n\nThis function does not return a `result`; polling in itself does not\ndo any I/O so it doesn't fail. If any of the I/O sources identified by\nthe pollables has an error, it is indicated by marking the source as\nbeing reaedy for I/O."
          }
        }
      },
      "docs": {
        "contents": "A poll API intended to let users wait for I/O events on multiple handles\nat once."
      },
      "package": 1
    },
    {
      "name": "monotonic-clock",
      "types": {
        "pollable": 4,
        "instant": 5,
        "duration": 6
      },
      "functions": {
        "now": {
          "name": "now",
          "kind": "freestanding",
          "params": [],
          "result": 5,
          "docs": {
            "contents": "Read the current value of the clock.\n\nThe clock is monotonic, therefore calling this function repeatedly will\nproduce a sequence of non-decreasing values."
          }
        },
        "resolution": {
          "name": "resolution",
          "kind": "freestanding",
          "params": [],
          "result": 6,
          "docs": {
            "contents": "Query the resolution of the clock. Returns the duration of time\ncorresponding to a clock tick."
          }
        },
        "subscribe-instant": {
          "name": "subscribe-instant",
          "kind": "freestanding",
          "params": [
            {
              "name": "when",
              "type": 5
            }
          ],
          "result": 8,
          "docs": {
            "contents": "Create a `pollable` which will resolve once the specified instant\noccured."
          }
        },
        "subscribe-duration": {
          "name": "subscribe-duration",
          "kind": "freestanding",
          "params": [
            {
              "name": "when",
              "type": 6
            }
          ],
          "result": 8,
          "docs": {
            "contents": "Create a `pollable` which will resolve once the given duration has\nelapsed, starting at the time at which this function was called.\noccured."
          }
        }
      },
      "docs": {
        "contents": "WASI Monotonic Clock is a clock API intended to let users measure elapsed\ntime.\n\nIt is intended to be portable at least between Unix-family platforms and\nWindows.\n\nA monotonic clock is a clock which has an unspecified initial value, and\nsuccessive reads of the clock will produce non-decreasing values.\n\nIt is intended for measuring elapsed time."
      },
      "package": 2
    },
    {
      "name": "wall-clock",
      "types": {
        "datetime": 7
      },
      "functions": {
        "now": {
          "name": "now",
          "kind": "freestanding",
          "params": [],
          "result": 7,
          "docs": {
            "contents": "Read the current value of the clock.\n\nThis clock is not monotonic, therefore calling this function repeatedly\nwill not necessarily produce a sequence of non-decreasing values.\n\nThe returned timestamps represent the number of seconds since\n1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],\nalso known as [Unix Time].\n\nThe nanoseconds field of the output is always less than 1000000000.\n\n[POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16\n[Unix Time]: https://en.wikipedia.org/wiki/Unix_time"
          }
        },
        "resolution": {
          "name": "resolution",
          "kind": "freestanding",
          "params": [],
          "result": 7,
          "docs": {
            "contents": "Query the resolution of the clock.\n\nThe nanoseconds field of the output is always less than 1000000000."
          }
        }
      },
      "docs": {
        "contents": "WASI Wall Clock is a clock API intended to let users query the current\ntime. The name \"wall\" makes an analogy to a \"clock on the wall\", which\nis not necessarily monotonic as it may be reset.\n\nIt is intended to be portable at least between Unix-family platforms and\nWindows.\n\nA wall clock is a clock which measures the date and time according to\nsome external reference.\n\nExternal references may be reset, so this clock is not necessarily\nmonotonic, making it unsuitable for measuring elapsed time.\n\nIt is intended for reporting the current date and time for humans."
      },
      "package": 2
    }
  ],
  "types": [
    {
      "name": "pollable",
      "kind": "resource",
      "owner": {
        "interface": 0
      },
      "docs": {
        "contents": "`pollable` represents a single I/O event which may be ready, or not."
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "borrow": 0
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "list": 1
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "list": "u32"
      },
      "owner": null
    },
    {
      "name": "pollable",
      "kind": {
        "type": 0
      },
      "owner": {
        "interface": 1
      }
    },
    {
      "name": "instant",
      "kind": {
        "type": "u64"
      },
      "owner": {
        "interface": 1
      },
      "docs": {
        "contents": "An instant in time, in nanoseconds. An instant is relative to an\nunspecified initial value, and can only be compared to instances from\nthe same monotonic-clock."
      }
    },
    {
      "name": "duration",
      "kind": {
        "type": "u64"
      },
      "owner": {
        "interface": 1
      },
      "docs": {
        "contents": "A duration of time, in nanoseconds."
      }
    },
    {
      "name": "datetime",
      "kind": {
        "record": {
          "fields": [
            {
              "name": "seconds",
              "type": "u64"
            },
            {
              "name": "nanoseconds",
              "type": "u32"
            }
          ]
        }
      },
      "owner": {
        "interface": 2
      },
      "docs": {
        "contents": "A time and date in seconds plus nanoseconds."
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "own": 4
        }
      },
      "owner": null
    }
  ],
  "packages": [
    {
      "name": "wasi:cli@0.2.0",
      "interfaces": {},
      "worlds": {}
    },
    {
      "name": "wasi:io@0.2.0",
      "interfaces": {
        "poll": 0
      },
      "worlds": {}
    },
    {
      "name": "wasi:clocks@0.2.0",
      "interfaces": {
        "monotonic-clock": 1,
        "wall-clock": 2
      },
      "worlds": {
        "imports": 0
      }
    }
  ]
}